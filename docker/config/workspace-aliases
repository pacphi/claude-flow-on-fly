#!/bin/bash
# Workspace Aliases - Unified Configuration
# ==========================================
# This file consolidates all workspace aliases into one organized location.
# Aliases are grouped by function and workflow for easy navigation and maintenance.
# shellcheck disable=SC2142  # Allow aliases to reference functions

# ============================================================================
# 1. SESSION MANAGEMENT (Tmux)
# ============================================================================

# Session management
alias tmux-workspace="/workspace/scripts/tmux-workspace.sh"
alias tmux-start="tmux-workspace"
alias tmux-new="tmux-workspace --new"
alias tmux-attach="tmux attach -t claude-workspace"
alias tmux-detach="tmux detach"

# Session utilities
alias tmux-status="source /workspace/scripts/lib/tmux-helpers.sh && tmux_status"
alias tmux-cleanup="source /workspace/scripts/lib/tmux-helpers.sh && tmux_cleanup"
alias tmux-list="tmux list-sessions"

# Window management
alias tmux-windows="tmux list-windows"
alias tmux-panes="tmux list-panes"

# Quick navigation (when inside tmux)
alias t0="tmux select-window -t 0"  # Claude-1
alias t1="tmux select-window -t 1"  # Claude-2
alias t2="tmux select-window -t 2"  # Monitor
alias t3="tmux select-window -t 3"  # htop

# Development shortcuts
alias claude1="tmux select-window -t 0 && tmux send-keys 'claude' C-m"
alias claude2="tmux select-window -t 1 && tmux send-keys 'claude' C-m"
alias monitor="tmux select-window -t 2"
alias top="tmux select-window -t 3"

# Enhanced tmux helpers (using externalized functions)
alias tmux-dev-layout="source /workspace/scripts/lib/tmux-helpers.sh && tmux_dev_layout"
alias tmux-save="source /workspace/scripts/lib/tmux-helpers.sh && tmux_save_session"
alias tmux-restore="source /workspace/scripts/lib/tmux-helpers.sh && tmux_restore_session"
alias tmux-new-window="source /workspace/scripts/lib/tmux-helpers.sh && tmux_new_window"

# Configuration management
alias tmux-config="nano /workspace/config/tmux.conf"
alias tmux-reload="tmux source-file ~/.tmux.conf && echo 'Tmux config reloaded!'"

# Project-specific session management
tmux-project() {
    local name="$1"
    if [[ -z "$name" ]]; then
        echo "Usage: tmux-project <name>"
        return 1
    fi
    tmux new-session -d -s "$name" -c "/workspace" && echo "✅ Created project session: $name"
}

tmux-switch() {
    local sessions
    sessions=$(tmux list-sessions -F "#{session_name}" 2>/dev/null)
    if [[ -z "$sessions" ]]; then
        echo "No sessions found"
        return 1
    fi
    echo "Available sessions:"
    echo "$sessions"
    read -rp "Switch to: " choice
    tmux switch-client -t "$choice" 2>/dev/null || tmux attach -t "$choice"
}

# Development workflow helpers
alias tmux-claude="tmux-workspace && tmux select-window -t 0 && tmux send-keys 'claude' C-m"
alias tmux-agents="tmux select-window -t 0 && tmux send-keys 'agent-list' C-m"
alias tmux-context="tmux select-window -t 0 && tmux send-keys 'load-context' C-m"

# Session backup and restore
tmux-backup-all() {
    local backup_dir="/workspace/backups/tmux-$(date +%Y%m%d-%H%M%S)"
    mkdir -p "$backup_dir"
    tmux list-sessions -F "#{session_name}" | while read -r session; do
        tmux list-windows -t "$session" -F "#{session_name}:#{window_index}:#{window_name}:#{pane_current_path}" > "$backup_dir/${session}.save"
    done
    echo "✅ All sessions backed up to $backup_dir"
}

# Enhanced restoration helpers
tmux-restore-last() {
    local backup_dir
    backup_dir=$(find /workspace/backups -name "shutdown-*" -type d 2>/dev/null | sort -r | head -1)
    if [[ -n "$backup_dir" ]]; then
        echo "🔄 Restoring from: $backup_dir"
        find "$backup_dir" -name "*.save" | while read -r save_file; do
            local session_name
            session_name=$(basename "$save_file" .save)
            echo "Restoring session: $session_name"
            tmux new-session -d -s "$session_name" 2>/dev/null || true
        done
        echo "✅ Sessions restored - use tmux-list to see available sessions"
    else
        echo "❌ No shutdown backups found"
    fi
}

tmux-find-backups() {
    echo "🔍 Available session backups:"
    echo ""
    echo "Shutdown backups:"
    find /workspace/backups -name "shutdown-*" -type d 2>/dev/null | sort -r | head -5 | while read -r dir; do
        local date_str save_count
        date_str=$(basename "$dir" | sed "s/shutdown-//")
        save_count=$(find "$dir" -name "*.save" 2>/dev/null | wc -l)
        echo "  📁 $date_str ($save_count sessions)"
    done
    echo ""
    echo "Session saves:"
    find /workspace -name ".tmux-session-*.save" 2>/dev/null | sort -r | head -5 | while read -r file; do
        local session_name
        session_name=$(basename "$file" .save | sed "s/.tmux-session-//")
        echo "  📄 $session_name"
    done
}

# Development session management
tmux-dev-quick() {
    if ! tmux has-session -t dev 2>/dev/null; then
        tmux new-session -d -s dev -c "/workspace"
        tmux split-window -h -t dev -c "/workspace"
        tmux split-window -v -t dev.1 -c "/workspace"
        tmux select-pane -t dev.0
    fi
    tmux attach -t dev
}

tmux-resume-workspace() {
    if tmux has-session -t claude-workspace 2>/dev/null; then
        echo "✅ Resuming existing workspace..."
        tmux attach -t claude-workspace
    else
        echo "🔄 No existing workspace found, starting new..."
        tmux-workspace
    fi
}

# ============================================================================
# 2. CONTEXT & ENVIRONMENT
# ============================================================================

# Context loading
alias load-context="source /workspace/scripts/lib/context-loader.sh && load_all_context"
alias load-global="source /workspace/scripts/lib/context-loader.sh && load_global_context"
alias load-user="source /workspace/scripts/lib/context-loader.sh && load_user_context"
alias load-project="source /workspace/scripts/lib/context-loader.sh && load_project_context"

# Context validation and information
alias validate-context="source /workspace/scripts/lib/context-loader.sh && validate_context"
alias context-hierarchy="source /workspace/scripts/lib/context-loader.sh && show_context_hierarchy"
alias context-status="validate-context"

# Context file editing
alias edit-global-claude="nano /workspace/context/global/CLAUDE.md"
alias edit-global-cc="nano /workspace/context/global/CCFOREVER.md"
alias edit-project="nano ./CLAUDE.md"
alias edit-user="mkdir -p ~/.claude && nano ~/.claude/CLAUDE.md"

# Claude Code Direct Access
alias cf-dsp="claude --dangerously-skip-permissions"
alias dsp="claude --dangerously-skip-permissions"

# ============================================================================
# 3. AGENT MANAGEMENT
# ============================================================================

# Core agent management
alias agent-install="agent-manager install --config /workspace/config/agents-config.yaml"
alias agent-list="agent-manager list --config /workspace/config/agents-config.yaml"
alias agent-update="agent-manager update --config /workspace/config/agents-config.yaml"
alias agent-validate="agent-manager validate --config /workspace/config/agents-config.yaml"

# Agent discovery and search (using agent-discovery.sh functions)
alias agent-count='count_agents'
alias agent-sources="agent-manager validate --config /workspace/config/agents-config.yaml --show-sources 2>/dev/null || echo 'Run agent-validate to see sources'"

# Agent search functions (now using proper discovery functions)
alias agent-find='search_agents_by_name'
alias agent-sample='sample_agents'
alias agent-by-category='list_agents_by_category'
alias agent-with-keyword='find_agents_with_functionality'

# Advanced search and discovery
alias agent-search='search_agents_by_content'
alias agent-metadata='get_agent_metadata'
alias agent-list-all='list_all_agents_with_metadata'
alias agent-by-tag='find_agents_by_tag'
alias agent-search-fast='search_agent_index'
alias agent-duplicates='find_duplicate_agents'
alias agent-validate-all='validate_all_agents'

# Index management
alias agent-index='create_agent_index'
alias agent-index-search='search_agent_index'

# Statistics and information
alias agent-stats='get_agent_stats'

# Agent information and validation (simplified - using discovery functions)
alias agent-info='get_agent_metadata'
alias agent-validate-file='validate_agent_file'

# Batch operations
alias agent-install-all="agent-manager install --config /workspace/config/agents-config.yaml --all"

agent-backup() {
    cp -r /workspace/agents "/workspace/backups/agents-$(date +%Y%m%d-%H%M%S)"
}

# Configuration management
alias agent-config="nano /workspace/config/agents-config.yaml"
alias agent-config-validate="agent-manager validate --config /workspace/config/agents-config.yaml --config-only"
alias agent-config-show="cat /workspace/config/agents-config.yaml"

# Maintenance aliases
alias agent-cleanup="find /workspace/agents -name '*.bak' -delete && find /workspace/agents -empty -type d -delete"

# Development helpers for creating custom agents
new-agent() {
    local name="$1"
    if [[ -z "$name" ]]; then
        echo "Usage: new-agent <name>"
        return 1
    fi
    local file="/workspace/agents/custom/${name}.md"
    mkdir -p "$(dirname "$file")"
    cat > "$file" << EOF
name: $name
description: Custom agent for specific tasks

## Instructions
You are a specialized agent that helps with...

## Capabilities
- Capability 1
- Capability 2

## Usage Examples
Use this agent when you need to...
EOF
    echo "Created new agent template: $file"
}

# Quick access to mandatory agents
alias doc-planner="cat /workspace/agents/doc-planner.md"
alias microtask-breakdown="cat /workspace/agents/microtask-breakdown.md"

# Integration with Claude Flow
cf-with-agents() {
    echo "Available agents: $(count_agents)"
    echo "Mandatory agents loaded:"
    doc-planner | head -5
    echo "---"
    microtask-breakdown | head -5
}

# Help command - shows all available agent commands
agent-help() {
    cat << 'EOF'
🤖 Agent Management Commands
============================

CORE MANAGEMENT:
  agent-install         Install agents from configured sources
  agent-update          Update agents to latest versions
  agent-list            List all installed agents
  agent-validate        Validate agent configuration

SEARCH & DISCOVERY:
  agent-find <term>     Search agents by name
  agent-search <term>   Search agents by content
  agent-by-category     List agents organized by category
  agent-by-tag <tag>    Find agents with specific tag
  agent-with-keyword    Find agents with keyword in filename
  agent-sample [n]      Show n random agents (default: 5)

INFORMATION:
  agent-count           Count total installed agents
  agent-stats           Show comprehensive statistics
  agent-info <file>     Show metadata for specific agent
  agent-list-all        List all agents with descriptions
  agent-metadata <file> Get structured metadata for agent

VALIDATION & QUALITY:
  agent-validate-all    Validate all installed agents
  agent-validate-file   Validate specific agent file
  agent-duplicates      Find agents with duplicate names
  agent-sources         Show configured agent sources

INDEX & PERFORMANCE:
  agent-index           Create search index for faster queries
  agent-index-search    Search using indexed data (fast)
  agent-search-fast     Alias for indexed search

MAINTENANCE:
  agent-backup          Backup all agents with timestamp
  agent-cleanup         Remove backup and empty directories
  agent-config          Edit agent manager configuration
  agent-config-show     Display current configuration

DEVELOPMENT:
  new-agent <name>      Create new custom agent template
  doc-planner           View doc-planner agent
  microtask-breakdown   View microtask agent

INTEGRATION:
  cf-with-agents        Show agent status for Claude Flow

Use "agent-<command> -h" or "agent-<command> --help" for detailed help on specific commands.
EOF
}

# ============================================================================
# 4. CLAUDE FLOW OPERATIONS
# ============================================================================

# Claude Flow with context
alias cf-swarm="/workspace/scripts/cf-with-context.sh swarm"
alias cf-hive="/workspace/scripts/cf-with-context.sh hive-mind spawn"

# Initialization & Setup
alias cf-init="npx claude-flow@alpha init --force"
alias cf-init-verify="npx claude-flow@alpha init --verify --pair --github-enhanced"
alias cf-init-project="npx claude-flow@alpha init --force --project-name"
alias cf-init-nexus="npx claude-flow@alpha init --flow-nexus"

# Hive-Mind Operations
alias cf-spawn="npx claude-flow@alpha hive-mind spawn"
alias cf-wizard="npx claude-flow@alpha hive-mind wizard"
alias cf-resume="npx claude-flow@alpha hive-mind resume"
alias cf-status="npx claude-flow@alpha hive-mind status"
alias cf-sessions="npx claude-flow@alpha hive-mind sessions"
alias cf-upgrade="npx claude-flow@alpha hive-mind upgrade"
alias cf-github-hive="npx claude-flow@alpha hive-mind spawn --github-enhanced --agents 13 --claude"

# Swarm Operations
alias cf-continue="npx claude-flow@alpha swarm --continue-session"
alias cf-swarm-temp="npx claude-flow@alpha swarm --temp"
alias cf-swarm-namespace="npx claude-flow@alpha swarm --namespace"

# Memory Management
alias cf-memory-stats="npx claude-flow@alpha memory stats"
alias cf-memory-list="npx claude-flow@alpha memory list"
alias cf-memory-query="npx claude-flow@alpha memory query"
alias cf-memory-recent="npx claude-flow@alpha memory query --recent --limit 5"
alias cf-memory-clear="npx claude-flow@alpha memory clear"
alias cf-memory-export="npx claude-flow@alpha memory export"
alias cf-memory-import="npx claude-flow@alpha memory import"

# Neural Operations
alias cf-neural-train="npx claude-flow@alpha neural train"
alias cf-neural-predict="npx claude-flow@alpha neural predict"
alias cf-neural-status="npx claude-flow@alpha neural status"
alias cf-neural-models="npx claude-flow@alpha neural models"

# Goal Planning (GOAP)
alias cf-goal-plan="npx claude-flow@alpha goal plan"
alias cf-goal-execute="npx claude-flow@alpha goal execute"
alias cf-goal-status="npx claude-flow@alpha goal status"

# Agent Management (Claude Flow)
alias cf-agents-list="npx claude-flow@alpha agents list"
alias cf-agents-spawn="npx claude-flow@alpha agents spawn"
alias cf-agents-status="npx claude-flow@alpha agents status"
alias cf-agents-assign="npx claude-flow@alpha agents assign"

# Hooks System
alias cf-hooks-list="npx claude-flow@alpha hooks list"
alias cf-hooks-enable="npx claude-flow@alpha hooks enable"
alias cf-hooks-disable="npx claude-flow@alpha hooks disable"
alias cf-hooks-config="npx claude-flow@alpha hooks config"

# GitHub Integration
alias cf-github-init="npx claude-flow@alpha github init"
alias cf-github-sync="npx claude-flow@alpha github sync"
alias cf-github-pr="npx claude-flow@alpha github pr"
alias cf-github-issues="npx claude-flow@alpha github issues"
alias cf-github-analyze="npx claude-flow@alpha github analyze"
alias cf-github-migrate="npx claude-flow@alpha github migrate"

# Flow Nexus Cloud
alias cf-nexus-login="npx claude-flow@alpha nexus login"
alias cf-nexus-sandbox="npx claude-flow@alpha nexus sandbox"
alias cf-nexus-swarm="npx claude-flow@alpha nexus swarm"
alias cf-nexus-deploy="npx claude-flow@alpha nexus deploy"
alias cf-nexus-challenges="npx claude-flow@alpha nexus challenges"
alias cf-nexus-marketplace="npx claude-flow@alpha nexus marketplace"

# Performance & Analytics
alias cf-benchmark="npx claude-flow@alpha benchmark"
alias cf-analyze="npx claude-flow@alpha analyze"
alias cf-optimize="npx claude-flow@alpha optimize"
alias cf-metrics="npx claude-flow@alpha metrics"

# Verification & Testing
alias cf-verify="npx claude-flow@alpha verify"
alias cf-truth="npx claude-flow@alpha truth"
alias cf-test="npx claude-flow@alpha test"
alias cf-validate="npx claude-flow@alpha validate"

# Pairing & Collaboration
alias cf-pair="npx claude-flow@alpha pair --start"
alias cf-pair-stop="npx claude-flow@alpha pair --stop"
alias cf-pair-status="npx claude-flow@alpha pair --status"

# SPARC Methodology
alias cf-sparc-init="npx claude-flow@alpha sparc init"
alias cf-sparc-plan="npx claude-flow@alpha sparc plan"
alias cf-sparc-execute="npx claude-flow@alpha sparc execute"
alias cf-sparc-review="npx claude-flow@alpha sparc review"

# Quick Commands (Shortcuts)
alias cfs="cf-swarm"                    # Quick swarm
alias cfh="cf-hive"                     # Quick hive spawn
alias cfr="cf-resume"                   # Quick resume
alias cfst="cf-status"                  # Quick status
alias cfm="cf-memory-stats"             # Quick memory stats
alias cfmq="cf-memory-query"            # Quick memory query
alias cfa="cf-agents-list"              # Quick agent list
alias cfg="cf-github-analyze"           # Quick GitHub analysis
alias cfn="cf-nexus-swarm"              # Quick Nexus swarm

# Monitoring & Debugging
alias cf-monitor="claude-monitor"
alias cf-logs="npx claude-flow@alpha logs"
alias cf-debug="npx claude-flow@alpha debug"
alias cf-trace="npx claude-flow@alpha trace"

# Help & Documentation
alias cf-help="npx claude-flow@alpha --help"
alias cf-docs="echo 'Visit: https://github.com/ruvnet/claude-flow/wiki'"
alias cf-examples="echo 'Visit: https://github.com/ruvnet/claude-flow/tree/main/examples'"

# ============================================================================
# 5. AGENT-FLOW (Multi-Model AI)
# ============================================================================

# Core agent-flow commands
alias af="npx agentic-flow"
alias af-help="npx agentic-flow --help"
alias af-coder="npx agentic-flow --agent coder --task"
alias af-reviewer="npx agentic-flow --agent reviewer --task"
alias af-researcher="npx agentic-flow --agent researcher --task"

# Claude Code integration with different providers
alias af-claude="npx agentic-flow claude-code"
alias af-openrouter="npx agentic-flow claude-code --provider openrouter"
alias af-gemini="npx agentic-flow claude-code --provider gemini"

# Model-specific shortcuts (cost-optimized)
alias af-llama="npx agentic-flow --model meta-llama/llama-3.1-8b-instruct"
alias af-cost="npx agentic-flow --optimize cost"
alias af-speed="npx agentic-flow --optimize speed"
alias af-quality="npx agentic-flow --optimize quality"

# ============================================================================
# 6. PROJECT MANAGEMENT
# ============================================================================

# Project helpers
alias new-project="/workspace/scripts/lib/new-project.sh"
alias clone-project="/workspace/scripts/lib/clone-project.sh"
alias project-status="/workspace/scripts/lib/system-status.sh"

# Monitoring
alias cf-usage="claude-usage-cli"

# ============================================================================
# 7. UTILITY FUNCTIONS
# ============================================================================

# Quick task with automatic Claude integration
cf-task() {
    npx claude-flow@alpha swarm "$1" --claude
}

# Quick hive spawn with namespace
cf-hive-ns() {
    npx claude-flow@alpha hive-mind spawn "$1" --namespace "$2" --claude
}

# Memory search with context
cf-search() {
    npx claude-flow@alpha memory query "$1" --recent --context
}

# Quick Flow Nexus sandbox creation
cf-sandbox() {
    npx claude-flow@alpha nexus sandbox create --template "$1" --name "$2"
}

# Session management helper
cf-session() {
    case "$1" in
        list) npx claude-flow@alpha hive-mind sessions ;;
        resume) npx claude-flow@alpha hive-mind resume "$2" ;;
        status) npx claude-flow@alpha hive-mind status ;;
        *) echo "Usage: cf-session [list|resume <id>|status]" ;;
    esac
}

# Agent-flow utility functions
af-task() {
    npx agentic-flow --agent "${1:-coder}" --task "$2" --optimize balanced
}

af-provider() {
    local provider="${1:-openrouter}"
    shift
    npx agentic-flow claude-code --provider "$provider" "$@"
}
