#!/bin/bash
# 05-python.sh.example - Install Python development tools
# Rename this file to 05-python.sh to enable

# Source common utilities
source /workspace/scripts/lib/common.sh

# Check if Python3 is already sufficient
if command_exists python3 && command_exists pip3; then
    print_warning "Python3 and pip3 already available from system"
    current_version=$(python3 --version)
    print_status "Current version: $current_version"
else
    print_error "Python3 not found in system packages"
    print_status "Python should be installed via system packages"
    return 1
fi

# Install system dependencies for Python packages
print_status "Installing system dependencies..."
if command_exists apt-get; then
    sudo apt-get update && sudo apt-get install -y \
        python3-full \
        python3-dev \
        python3-pip \
        python3-venv \
        python3-requests \
        python3-numpy \
        python3-pandas \
        python3-pytest \
        black \
        pipx \
        build-essential \
        libffi-dev \
        libssl-dev \
        libbz2-dev \
        libreadline-dev \
        libsqlite3-dev \
        libncurses5-dev \
        libncursesw5-dev \
        xz-utils \
        tk-dev \
        libxml2-dev \
        libxmlsec1-dev \
        liblzma-dev || print_warning "Failed to install some system dependencies"
fi

# Setup pipx for global CLI tool installation
print_status "Setting up pipx environment..."
if command_exists pipx; then
    # Ensure pipx path is set up for current user
    pipx ensurepath
    export PATH="$HOME/.local/bin:$PATH"
    print_debug "✓ pipx environment configured"
else
    print_warning "pipx not available, skipping CLI tool installation"
fi

print_status "Installing Python development tools..."

# CLI tools that work well with pipx (globally accessible applications)
pipx_packages=(
    "virtualenv"      # Virtual environment management
    "pipenv"          # Python dependency management
    "poetry"          # Modern Python packaging and dependency management
    "flake8"          # Linting tool
    "autopep8"        # Auto-formatter
    "mypy"            # Static type checker
)

# Libraries already installed via system packages:
# python3-requests, python3-numpy, python3-pandas, python3-pytest, black

# Install CLI applications globally with pipx
installed_pipx=0
for package in "${pipx_packages[@]}"; do
    print_debug "Installing $package with pipx..."
    if pipx install "$package" 2>/dev/null; then
        print_debug "✓ $package installed globally"
        ((installed_pipx++))
    else
        print_warning "Failed to install $package with pipx"
    fi
done

# Install Jupyter Lab with --include-deps to expose all Jupyter-related commands
print_status "Installing Jupyter Lab with full dependencies..."
if pipx install jupyterlab --include-deps; then
    print_debug "✓ Jupyter Lab installed with all dependencies"
    ((installed_pipx++))

    # Inject commonly used data science packages into Jupyter Lab environment
    print_status "Adding common data science packages to Jupyter Lab..."
    jupyter_packages=("pandas" "numpy" "matplotlib" "requests")

    for pkg in "${jupyter_packages[@]}"; do
        print_debug "Injecting $pkg into jupyterlab..."
        if pipx inject jupyterlab "$pkg" 2>/dev/null; then
            print_debug "✓ $pkg injected into Jupyter Lab"
        else
            print_warning "Failed to inject $pkg (may already be available via system packages)"
        fi
    done
else
    print_warning "Failed to install Jupyter Lab with pipx"
fi

# Setup Python virtual environment template
print_status "Setting up Python project template..."

# Create a template for new Python projects
cat > /workspace/scripts/create-python-project.sh << 'EOF'
#!/bin/bash
# Create a new Python project with virtual environment

project_name="$1"
if [[ -z "$project_name" ]]; then
    echo "Usage: $0 <project-name>"
    exit 1
fi

# Create project directory
mkdir -p "/workspace/projects/active/$project_name"
cd "/workspace/projects/active/$project_name"

# Create virtual environment
python3 -m venv venv
source venv/bin/activate

# Create project structure
mkdir -p src tests docs
touch src/__init__.py
touch tests/__init__.py

# Create requirements files
cat > requirements.txt << 'REQ'
# Production dependencies
REQ

cat > requirements-dev.txt << 'REQ'
# Development dependencies
pytest>=7.0.0
black>=22.0.0
flake8>=4.0.0
mypy>=0.910
ipython>=8.0.0
REQ

# Create setup.py
cat > setup.py << 'SETUP'
from setuptools import setup, find_packages

setup(
    name="$project_name",
    version="0.1.0",
    packages=find_packages(where="src"),
    package_dir={"": "src"},
    python_requires=">=3.8",
)
SETUP

# Create README
cat > README.md << 'README'
# $project_name

## Setup

```bash
source venv/bin/activate
pip install -r requirements.txt
pip install -r requirements-dev.txt
```

## Testing

```bash
pytest tests/
```

## Formatting

```bash
black src/ tests/
flake8 src/ tests/
mypy src/
```
README

# Install dev dependencies
pip install -r requirements-dev.txt

echo "Python project '$project_name' created successfully!"
echo "To activate: source /workspace/projects/active/$project_name/venv/bin/activate"
EOF

chmod +x /workspace/scripts/create-python-project.sh

# Ensure Python scripts are in PATH
if [[ -d "/usr/local/bin" ]] && [[ ":$PATH:" != *":/usr/local/bin:"* ]]; then
    export PATH="/usr/local/bin:$PATH"
fi

# Add Python-specific Git aliases
if command_exists git; then
    git config --global alias.pytest '!python -m pytest'
    git config --global alias.black '!black .'
    git config --global alias.flake '!flake8 .'
fi

# Verify installations from multiple sources
print_status "Verifying Python package installations..."

# Check system packages (libraries)
system_packages=("requests" "numpy" "pandas" "pytest")
system_available=0
for package in "${system_packages[@]}"; do
    # Check if we can import the system-installed package
    if python3 -c "import $package" 2>/dev/null; then
        print_debug "✓ $package available (system package)"
        ((system_available++))
    fi
done

# Check pipx-installed tools (CLI applications)
pipx_available=0
for package in "${pipx_packages[@]}"; do
    # Check if the command is available in PATH
    if command_exists "$package" || pipx list | grep -q "$package" 2>/dev/null; then
        print_debug "✓ $package available (pipx)"
        ((pipx_available++))
    fi
done

# Check Jupyter Lab installation and related commands
jupyter_available=0
jupyter_commands=("jupyter" "jupyter-lab" "jupyter-notebook" "ipython")
if pipx list | grep -q "jupyterlab" 2>/dev/null; then
    print_debug "✓ jupyterlab installed (pipx)"
    jupyter_available=1

    # Check for Jupyter-related commands exposed by --include-deps
    for cmd in "${jupyter_commands[@]}"; do
        if command_exists "$cmd"; then
            print_debug "✓ $cmd available (from jupyterlab --include-deps)"
        fi
    done

    # Check for injected packages in Jupyter Lab environment
    if pipx list --verbose 2>/dev/null | grep -A 20 "jupyterlab" | grep -q "injected package"; then
        print_debug "✓ Additional packages injected into jupyterlab environment"
    fi
fi

# Check for tools installed via system packages
system_tools=("black")
system_tools_available=0
for tool in "${system_tools[@]}"; do
    if command_exists "$tool"; then
        print_debug "✓ $tool available (system package)"
        ((system_tools_available++))
    fi
done

total_packages=$((${#system_packages[@]} + ${#pipx_packages[@]} + ${#system_tools[@]} + 1))
total_available=$((system_available + pipx_available + system_tools_available + jupyter_available))

print_success "Python development environment configured"
print_status "Successfully installed $total_available/$total_packages Python packages and tools"
print_debug "System libraries: $system_available/${#system_packages[@]} | CLI tools (pipx): $pipx_available/${#pipx_packages[@]} | System tools: $system_tools_available/${#system_tools[@]} | Jupyter Lab: $jupyter_available/1"
