#!/bin/bash
# Cloud Provider CLI Tools Setup

# Source common utilities
source "${WORKSPACE_DIR:-/workspace}/scripts/lib/common.sh"

print_status "Cloud Provider CLI Tools Setup"

# AWS CLI
print_status "Installing AWS CLI..."
if ! command -v aws &> /dev/null; then
    curl -fsSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    unzip -q awscliv2.zip
    sudo ./aws/install
    rm -rf aws awscliv2.zip
    print_success "AWS CLI installed"
else
    print_status "AWS CLI already installed: $(aws --version)"
fi

# Azure CLI
print_status "Installing Azure CLI..."
if ! command -v az &> /dev/null; then
    curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    print_success "Azure CLI installed"
else
    print_status "Azure CLI already installed: $(az version --output tsv --query '\"azure-cli\"')"
fi

# Google Cloud CLI
print_status "Installing Google Cloud CLI..."
if ! command -v gcloud &> /dev/null; then
    echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
    sudo apt-get update && sudo apt-get install -y google-cloud-cli
    print_success "Google Cloud CLI installed"
else
    print_status "Google Cloud CLI already installed: $(gcloud version --format='value(version)')"
fi

# Oracle Cloud Infrastructure CLI
print_status "Installing Oracle Cloud CLI..."
if ! command -v oci &> /dev/null; then
    bash -c "$(curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh)" -- --accept-all-defaults
    # Add OCI CLI to PATH for current session
    export PATH=$PATH:$HOME/bin
    # Add to bashrc for persistence
    echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
    print_success "Oracle Cloud CLI installed"
else
    print_status "Oracle Cloud CLI already installed: $(oci --version)"
fi

# Alibaba Cloud CLI
print_status "Installing Alibaba Cloud CLI..."
if ! command -v aliyun &> /dev/null; then
    wget -q https://aliyuncli.alicdn.com/aliyun-cli-linux-latest-amd64.tgz
    tar xzf aliyun-cli-linux-latest-amd64.tgz
    sudo mv aliyun /usr/local/bin/
    rm aliyun-cli-linux-latest-amd64.tgz
    print_success "Alibaba Cloud CLI installed"
else
    print_status "Alibaba Cloud CLI already installed: $(aliyun version)"
fi

# DigitalOcean CLI
print_status "Installing DigitalOcean CLI (doctl)..."
if ! command -v doctl &> /dev/null; then
    DOCTL_VERSION=$(curl -s https://api.github.com/repos/digitalocean/doctl/releases/latest | grep '"tag_name"' | sed -E 's/.*"v([^"]+)".*/\1/')
    wget -q "https://github.com/digitalocean/doctl/releases/download/v${DOCTL_VERSION}/doctl-${DOCTL_VERSION}-linux-amd64.tar.gz"
    tar xzf "doctl-${DOCTL_VERSION}-linux-amd64.tar.gz"
    sudo mv doctl /usr/local/bin/
    rm "doctl-${DOCTL_VERSION}-linux-amd64.tar.gz"
    print_success "DigitalOcean CLI installed"
else
    print_status "DigitalOcean CLI already installed: $(doctl version)"
fi

# IBM Cloud CLI
print_status "Installing IBM Cloud CLI..."
if ! command -v ibmcloud &> /dev/null; then
    curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
    print_success "IBM Cloud CLI installed"
else
    print_status "IBM Cloud CLI already installed: $(ibmcloud version)"
fi

# Create cloud projects workspace
print_status "Setting up cloud workspace directories..."
mkdir -p "$WORKSPACE_DIR/cloud"/{aws,azure,gcp,oracle,alibaba,digitalocean,ibm}

# Create comprehensive README
cat > "$WORKSPACE_DIR/cloud/README.md" << 'EOF'
# Cloud Provider CLIs Workspace

## Installed Cloud Provider CLIs

### Amazon Web Services (AWS)
- **CLI**: `aws`
- **Documentation**: https://aws.amazon.com/cli/
- **Configuration**: `aws configure`

### Microsoft Azure
- **CLI**: `az`
- **Documentation**: https://docs.microsoft.com/cli/azure/
- **Login**: `az login`

### Google Cloud Platform (GCP)
- **CLI**: `gcloud`
- **Documentation**: https://cloud.google.com/sdk/gcloud
- **Authentication**: `gcloud auth login`
- **Set Project**: `gcloud config set project PROJECT_ID`

### Oracle Cloud Infrastructure (OCI)
- **CLI**: `oci`
- **Documentation**: https://docs.oracle.com/iaas/tools/oci-cli/
- **Setup**: `oci setup config`

### Alibaba Cloud
- **CLI**: `aliyun`
- **Documentation**: https://www.alibabacloud.com/help/cli
- **Configuration**: `aliyun configure`

### DigitalOcean
- **CLI**: `doctl`
- **Documentation**: https://docs.digitalocean.com/reference/doctl/
- **Authentication**: `doctl auth init`

### IBM Cloud
- **CLI**: `ibmcloud`
- **Documentation**: https://cloud.ibm.com/docs/cli
- **Login**: `ibmcloud login`

## Directory Structure
```
cloud/
├── aws/            # AWS configurations and scripts
├── azure/          # Azure configurations and scripts
├── gcp/            # GCP configurations and scripts
├── oracle/         # Oracle Cloud configurations
├── alibaba/        # Alibaba Cloud configurations
├── digitalocean/   # DigitalOcean configurations
└── ibm/            # IBM Cloud configurations
```

## Quick Start Examples

### AWS
```bash
# Configure credentials
aws configure

# List S3 buckets
aws s3 ls

# List EC2 instances
aws ec2 describe-instances
```

### Azure
```bash
# Login
az login

# List resource groups
az group list

# List virtual machines
az vm list
```

### Google Cloud
```bash
# Authenticate
gcloud auth login

# Set project
gcloud config set project my-project

# List compute instances
gcloud compute instances list
```

### Oracle Cloud
```bash
# Configure
oci setup config

# List compute instances
oci compute instance list --compartment-id <compartment-ocid>
```

### Alibaba Cloud
```bash
# Configure
aliyun configure

# List ECS instances
aliyun ecs DescribeInstances
```

### DigitalOcean
```bash
# Authenticate
doctl auth init

# List droplets
doctl compute droplet list

# List Kubernetes clusters
doctl kubernetes cluster list
```

### IBM Cloud
```bash
# Login
ibmcloud login

# List resource groups
ibmcloud resource groups

# List virtual server instances
ibmcloud is instances
```

## Multi-Cloud Best Practices

1. **Credential Management**: Keep credentials secure and never commit them to version control
2. **Environment Separation**: Use different profiles/accounts for dev, staging, and production
3. **Cost Monitoring**: Regularly review cloud spending across all providers
4. **Resource Tagging**: Tag resources consistently for better organization and cost allocation
5. **Infrastructure as Code**: Use Terraform, Pulumi, or provider-specific tools (CloudFormation, ARM templates, etc.)

## Additional Tools

Consider installing these multi-cloud tools:
- **Terraform**: Multi-cloud infrastructure as code
- **Pulumi**: Infrastructure as code using programming languages
- **CloudQuery**: Multi-cloud asset inventory and security

EOF

print_success "Cloud provider CLI tools setup complete!"
print_status "Cloud workspace created at: $WORKSPACE_DIR/cloud"
print_status "Run 'source ~/.bashrc' to update PATH for OCI CLI"
print_status "Configure each CLI with its respective authentication command"
