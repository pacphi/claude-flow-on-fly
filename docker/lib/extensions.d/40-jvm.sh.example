#!/bin/bash
# 40-jvm.sh.example - Install JVM languages and development tools
# Supports Java, Kotlin, Scala, and Clojure development
# Rename this file to 40-jvm.sh to enable

# Source common utilities
source /workspace/scripts/lib/common.sh

print_status "Installing JVM development environment..."

# Install SDKMAN for managing JVM SDKs
if [[ ! -d "$HOME/.sdkman" ]]; then
    print_status "Installing SDKMAN..."
    if curl -s "https://get.sdkman.io" | bash; then
        # Source SDKMAN
        source "$HOME/.sdkman/bin/sdkman-init.sh"

        # Add to bashrc for future sessions
        echo '' >> ~/.bashrc
        echo '# SDKMAN configuration' >> ~/.bashrc
        echo 'export SDKMAN_DIR="$HOME/.sdkman"' >> ~/.bashrc
        echo '[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"' >> ~/.bashrc

        print_success "SDKMAN installed successfully"
    else
        print_error "Failed to install SDKMAN"
        return 1
    fi
else
    print_warning "SDKMAN is already installed"
    source "$HOME/.sdkman/bin/sdkman-init.sh"
fi

# Install Java versions
print_status "Installing Java SDKs..."

java_versions=(
    "21.0.7-librca"    # LTS version (Liberica)
    "17.0.16-librca"   # Previous LTS
    "11.0.28-librca"   # Extended LTS
)

for version in "${java_versions[@]}"; do
    print_debug "Installing Java $version..."
    if sdk install java "$version" <<< "n" 2>/dev/null; then
        print_debug "✓ Java $version installed"
    else
        print_warning "Failed to install Java $version or already installed"
    fi
done

# Set default Java version
sdk default java 21.0.7-librca 2>/dev/null

# Install build tools
print_status "Installing JVM build tools..."

# Maven
if ! command_exists mvn; then
    print_debug "Installing Maven..."
    if sdk install maven 2>/dev/null; then
        print_debug "✓ Maven installed"
    else
        print_warning "Failed to install Maven"
    fi
fi

# Gradle
if ! command_exists gradle; then
    print_debug "Installing Gradle..."
    if sdk install gradle 2>/dev/null; then
        print_debug "✓ Gradle installed"
    else
        print_warning "Failed to install Gradle"
    fi
fi

# Install language-specific tools
print_status "Installing language-specific tools..."

# Kotlin
if ! command_exists kotlin; then
    print_debug "Installing Kotlin..."
    if sdk install kotlin 2>/dev/null; then
        print_debug "✓ Kotlin installed"
    else
        print_warning "Failed to install Kotlin"
    fi
fi

# Scala and sbt
if ! command_exists scala; then
    print_debug "Installing Scala..."
    if sdk install scala 2>/dev/null; then
        print_debug "✓ Scala installed"
    else
        print_warning "Failed to install Scala"
    fi
fi

if ! command_exists sbt; then
    print_debug "Installing sbt..."
    if sdk install sbt 2>/dev/null; then
        print_debug "✓ sbt installed"
    else
        print_warning "Failed to install sbt"
    fi
fi

# Clojure and Leiningen
if ! command_exists clojure; then
    print_debug "Installing Clojure..."
    # Install Clojure CLI tools
    if curl -L -O https://github.com/clojure/brew-install/releases/latest/download/linux-install.sh \
       && chmod +x linux-install.sh \
       && sudo ./linux-install.sh 2>/dev/null; then
        rm linux-install.sh
        print_debug "✓ Clojure installed"
    else
        print_warning "Failed to install Clojure"
    fi
fi

if ! command_exists lein; then
    print_debug "Installing Leiningen..."
    if wget -q https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein \
       && chmod +x lein \
       && sudo mv lein /usr/local/bin/ \
       && lein 2>/dev/null; then
        print_debug "✓ Leiningen installed"
    else
        print_warning "Failed to install Leiningen"
    fi
fi

# Install additional JVM tools
print_status "Installing additional JVM development tools..."

# JBang - Run Java code as scripts
if ! command_exists jbang; then
    print_debug "Installing JBang..."
    if sdk install jbang 2>/dev/null; then
        print_debug "✓ JBang installed"
    else
        print_warning "Failed to install JBang"
    fi
fi

# Spring Boot CLI
if ! command_exists spring; then
    print_debug "Installing Spring Boot CLI..."
    if sdk install springboot 2>/dev/null; then
        print_debug "✓ Spring Boot CLI installed"
    else
        print_warning "Failed to install Spring Boot CLI"
    fi
fi

# Micronaut CLI
if ! command_exists mn; then
    print_debug "Installing Micronaut CLI..."
    if sdk install micronaut 2>/dev/null; then
        print_debug "✓ Micronaut CLI installed"
    else
        print_warning "Failed to install Micronaut CLI"
    fi
fi

# Create useful JVM aliases
print_status "Creating JVM development aliases..."

jvm_aliases="
# JVM aliases
alias j11='sdk use java 11.0.28-librca'
alias j17='sdk use java 17.0.16-librca'
alias j21='sdk use java 21.0.7-librca'
alias jv='java -version'

# Maven aliases
alias mci='mvn clean install'
alias mcis='mvn clean install -DskipTests'
alias mcp='mvn clean package'
alias mcps='mvn clean package -DskipTests'
alias mt='mvn test'
alias mdep='mvn dependency:tree'

# Gradle aliases
alias gw='./gradlew'
alias gwb='./gradlew build'
alias gwc='./gradlew clean'
alias gwcb='./gradlew clean build'
alias gwt='./gradlew test'
alias gwr='./gradlew run'

# Spring Boot aliases
alias sbr='mvn spring-boot:run'
alias sbg='./gradlew bootRun'

# Kotlin aliases
alias kc='kotlinc'
alias kr='kotlin'

# Scala aliases
alias sc='scala'
alias sbti='sbt interactive'

# Clojure aliases
alias repl='clojure -M:repl'
alias lrepl='lein repl'
"

echo "$jvm_aliases" >> ~/.bashrc

print_success "JVM development environment configured with Java, Kotlin, Scala, and Clojure support"
