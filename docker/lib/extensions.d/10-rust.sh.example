#!/bin/bash
# 10-rust.sh.example - Install Rust toolchain and development tools
# Rename this file to 10-rust.sh to enable

# Source common utilities
source /workspace/scripts/lib/common.sh

# Check if Rust is already installed
if command_exists rustc; then
    print_warning "Rust is already installed: $(rustc --version)"
    return 0
fi

print_status "Installing Rust toolchain..."

# Install Rust via rustup
if curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y; then
    # Source cargo environment
    source $HOME/.cargo/env

    # Add to bashrc for future sessions
    echo 'source $HOME/.cargo/env' >> ~/.bashrc

    print_success "Rust installed: $(rustc --version)"
else
    print_error "Failed to install Rust"
    return 1
fi

# Install useful Rust tools
print_status "Installing additional Rust tools..."
print_warning "Note: This may take 10-15 minutes as tools compile from source"

# Essential tools (install first)
essential_tools=(
    "cargo-watch"     # Watch for changes and rebuild
    "cargo-edit"      # Add/remove dependencies from command line
)

# Optional tools (may be slow to compile)
optional_tools=(
    "cargo-audit"     # Security audit for dependencies
    "cargo-expand"    # Expand macros for debugging
    "cargo-outdated"  # Check for outdated dependencies
    "ripgrep"         # Fast grep alternative (rg command)
    "fd-find"         # Fast find alternative
    "exa"             # Modern ls replacement
    "bat"             # Better cat with syntax highlighting
    "tokei"           # Count lines of code
)

# Install essential tools first
for tool in "${essential_tools[@]}"; do
    print_debug "Installing essential tool: $tool..."
    if timeout 300 cargo install "$tool"; then
        print_debug "✓ $tool installed"
    else
        print_warning "Failed to install $tool (timeout after 5 minutes)"
    fi
done

# Install optional tools in background (user can continue)
print_status "Installing optional tools in background..."
print_info "You can continue working - these will install in the background"

for tool in "${optional_tools[@]}"; do
    print_debug "Starting background installation of $tool..."
    (
        if timeout 600 cargo install "$tool" &>/dev/null; then
            echo "[$(date)] ✓ $tool installed successfully" >> /workspace/rust-install.log
        else
            echo "[$(date)] ✗ $tool installation failed or timed out" >> /workspace/rust-install.log
        fi
    ) &
done

print_info "Background installations will log to /workspace/rust-install.log"
print_info "Check progress with: tail -f /workspace/rust-install.log"

# Install rust-analyzer for IDE support
print_status "Installing rust-analyzer..."
if rustup component add rust-analyzer 2>/dev/null; then
    print_success "rust-analyzer installed"
else
    print_warning "Failed to install rust-analyzer"
fi

# Create Rust project template script
print_status "Setting up Rust project template..."

cat > /workspace/scripts/create-rust-project.sh << 'EOF'
#!/bin/bash
# Create a new Rust project with Cargo

project_name="$1"
project_type="${2:-binary}"  # binary or library

if [[ -z "$project_name" ]]; then
    echo "Usage: $0 <project-name> [binary|library]"
    exit 1
fi

# Create project directory
cd /workspace/projects/active

# Create project based on type
if [[ "$project_type" == "library" ]]; then
    cargo new --lib "$project_name"
else
    cargo new "$project_name"
fi

cd "$project_name"

# Add common dependencies
cat >> Cargo.toml << 'DEPS'

[dependencies]
serde = { version = "1.0", features = ["derive"] }
tokio = { version = "1", features = ["full"] }
anyhow = "1.0"
thiserror = "1.0"

[dev-dependencies]
criterion = "0.5"
pretty_assertions = "1.4"
DEPS

# Create Makefile
cat > Makefile << 'MAKEFILE'
.PHONY: build run test clean watch doc

build:
	cargo build --release

run:
	cargo run

test:
	cargo test

clean:
	cargo clean

watch:
	cargo watch -x check -x test -x run

doc:
	cargo doc --open

bench:
	cargo bench

audit:
	cargo audit

fmt:
	cargo fmt

clippy:
	cargo clippy -- -D warnings
MAKEFILE

# Create README
cat > README.md << 'README'
# $project_name

## Build

```bash
cargo build --release
```

## Run

```bash
cargo run
```

## Test

```bash
cargo test
```

## Development

```bash
# Watch for changes and rebuild
cargo watch -x check -x test -x run

# Format code
cargo fmt

# Lint code
cargo clippy
```

## Documentation

```bash
cargo doc --open
```
README

# Create GitHub Actions workflow
mkdir -p .github/workflows
cat > .github/workflows/rust.yml << 'WORKFLOW'
name: Rust

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose
    - name: Check formatting
      run: cargo fmt -- --check
    - name: Run clippy
      run: cargo clippy -- -D warnings
WORKFLOW

echo "Rust project '$project_name' created successfully!"
echo "To run: cd /workspace/projects/active/$project_name && cargo run"
EOF

chmod +x /workspace/scripts/create-rust-project.sh

# Add Rust-specific Git aliases
if command_exists git; then
    git config --global alias.cargotest '!cargo test'
    git config --global alias.cargofmt '!cargo fmt'
    git config --global alias.cargoclippy '!cargo clippy -- -D warnings'
fi

print_success "Rust development environment configured"
