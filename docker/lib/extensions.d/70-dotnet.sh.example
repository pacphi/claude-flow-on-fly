#!/bin/bash
# 70-dotnet.sh.example - Install .NET SDK and development tools
# Rename this file to 70-dotnet.sh to enable

# Source common utilities
source /workspace/scripts/lib/common.sh

print_status "Installing .NET development environment..."

# Install Microsoft package repository
print_status "Setting up Microsoft package repository..."

# Get Ubuntu version
UBUNTU_VERSION=$(lsb_release -rs)

# Download Microsoft repository configuration
if wget -q https://packages.microsoft.com/config/ubuntu/$UBUNTU_VERSION/packages-microsoft-prod.deb -O packages-microsoft-prod.deb; then
    sudo dpkg -i packages-microsoft-prod.deb
    rm packages-microsoft-prod.deb
    sudo apt-get update -qq
    print_success "Microsoft package repository configured"
else
    print_error "Failed to configure Microsoft package repository"
    return 1
fi

# Install .NET SDK versions
print_status "Installing .NET SDKs..."

dotnet_sdks=(
    "dotnet-sdk-8.0"    # Current LTS
    "dotnet-sdk-7.0"    # Previous version
    "dotnet-sdk-6.0"    # Previous LTS
)

for sdk in "${dotnet_sdks[@]}"; do
    print_debug "Installing $sdk..."
    if sudo apt-get install -y "$sdk" 2>/dev/null; then
        print_debug "✓ $sdk installed"
    else
        print_warning "Failed to install $sdk or already installed"
    fi
done

# Install ASP.NET Core Runtime
print_status "Installing ASP.NET Core Runtime..."
if sudo apt-get install -y aspnetcore-runtime-8.0 2>/dev/null; then
    print_success "ASP.NET Core Runtime installed"
else
    print_warning "Failed to install ASP.NET Core Runtime or already installed"
fi

# Verify installation
if command_exists dotnet; then
    print_success ".NET installed: $(dotnet --version)"
    print_debug "Installed SDKs:"
    dotnet --list-sdks
    print_debug "Installed Runtimes:"
    dotnet --list-runtimes
else
    print_error ".NET installation failed"
    return 1
fi

# Set environment variables
echo '' >> ~/.bashrc
echo '# .NET configuration' >> ~/.bashrc
echo 'export DOTNET_CLI_TELEMETRY_OPTOUT=1' >> ~/.bashrc
echo 'export DOTNET_ROOT=/usr/share/dotnet' >> ~/.bashrc
echo 'export PATH=$PATH:$HOME/.dotnet/tools' >> ~/.bashrc

# Set for current session
export DOTNET_CLI_TELEMETRY_OPTOUT=1
export DOTNET_ROOT=/usr/share/dotnet
export PATH=$PATH:$HOME/.dotnet/tools

# Install .NET global tools
print_status "Installing .NET global tools..."

dotnet_tools=(
    "dotnet-ef"                           # Entity Framework Core tools
    "dotnet-aspnet-codegenerator"         # ASP.NET Core scaffolding
    "dotnet-format"                       # Code formatter
    "dotnet-outdated-tool"                # Check for outdated packages
    "dotnet-script"                       # C# scripting
    "dotnet-serve"                         # Simple HTTP server
    "dotnet-watch"                         # File watcher
    "Microsoft.dotnet-interactive"         # .NET Interactive notebooks
    "Microsoft.Web.LibraryManager.Cli"     # Client-side library manager
    "dotnet-reportgenerator-globaltool"    # Code coverage report generator
    "dotnet-sonarscanner"                  # SonarQube scanner
    "dotnet-stryker"                       # Mutation testing
    "BenchmarkDotNet.Tool"                 # Benchmarking tool
    "dotnet-counters"                      # Performance monitoring
    "dotnet-trace"                         # .NET tracer
    "dotnet-dump"                          # Dump collection and analysis
    "dotnet-gcdump"                        # GC dump collection
    "Swashbuckle.AspNetCore.Cli"          # Swagger/OpenAPI tools
    "coverlet.console"                     # Code coverage
)

for tool in "${dotnet_tools[@]}"; do
    print_debug "Installing $tool..."
    if dotnet tool install --global "$tool" 2>/dev/null; then
        print_debug "✓ $tool installed"
    else
        # Try updating if installation fails (might already be installed)
        if dotnet tool update --global "$tool" 2>/dev/null; then
            print_debug "✓ $tool updated"
        else
            print_warning "Failed to install/update $tool"
        fi
    fi
done

# Install NuGet CLI
print_status "Installing NuGet CLI..."
if ! command_exists nuget; then
    if sudo wget -O /usr/local/bin/nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe 2>/dev/null; then
        # Create wrapper script for nuget
        sudo tee /usr/local/bin/nuget > /dev/null << 'EOF'
#!/bin/bash
mono /usr/local/bin/nuget.exe "$@"
EOF
        sudo chmod +x /usr/local/bin/nuget

        # Install mono for NuGet CLI
        sudo apt-get install -y mono-complete 2>/dev/null
        print_success "NuGet CLI installed"
    else
        print_warning "Failed to install NuGet CLI"
    fi
fi

# Create useful .NET aliases
print_status "Creating .NET development aliases..."

dotnet_aliases='
# .NET Core aliases
alias dn="dotnet"
alias dnr="dotnet run"
alias dnb="dotnet build"
alias dnc="dotnet clean"
alias dnt="dotnet test"
alias dnp="dotnet publish"
alias dnw="dotnet watch"
alias dnwr="dotnet watch run"
alias dnwt="dotnet watch test"

# Project management
alias dnnew="dotnet new"
alias dnrestore="dotnet restore"
alias dnadd="dotnet add package"
alias dnrem="dotnet remove package"
alias dnlist="dotnet list package"
alias dnout="dotnet outdated"
alias dnsln="dotnet new sln"
alias dnaddsln="dotnet sln add"
alias dnremsln="dotnet sln remove"

# Entity Framework Core
alias ef="dotnet ef"
alias efm="dotnet ef migrations"
alias efma="dotnet ef migrations add"
alias efmr="dotnet ef migrations remove"
alias efml="dotnet ef migrations list"
alias efdb="dotnet ef database"
alias efdbu="dotnet ef database update"
alias efdbd="dotnet ef database drop"

# Templates
alias dnweb="dotnet new web"
alias dnapi="dotnet new webapi"
alias dnmvc="dotnet new mvc"
alias dnrazor="dotnet new razor"
alias dnblazor="dotnet new blazor"
alias dnclass="dotnet new classlib"
alias dnconsole="dotnet new console"
alias dnxunit="dotnet new xunit"
alias dnnunit="dotnet new nunit"
alias dnmstest="dotnet new mstest"

# Tool shortcuts
alias dnf="dotnet format"
alias dns="dotnet serve"
alias dnscript="dotnet script"
alias dnef="dotnet ef"
alias dngen="dotnet aspnet-codegenerator"

# Package management
alias nuget="mono /usr/local/bin/nuget.exe"
alias paket="mono .paket/paket.exe"

# Build configurations
alias dnbd="dotnet build -c Debug"
alias dnbr="dotnet build -c Release"
alias dnpd="dotnet publish -c Debug"
alias dnpr="dotnet publish -c Release"

# Testing
alias dntv="dotnet test --verbosity normal"
alias dntc="dotnet test --collect:\"XPlat Code Coverage\""
alias dntr="dotnet test --results-directory ./TestResults"
alias dntf="dotnet test --filter"

# Performance
alias dncount="dotnet counters"
alias dntrace="dotnet trace"
alias dndump="dotnet dump"
alias dngc="dotnet gcdump"

# Docker support
alias dndk="dotnet publish -c Release -o out && docker build -t app ."
'

echo "$dotnet_aliases" >> ~/.bashrc

# Create sample configuration files
print_status "Creating sample configuration files..."

# Global.json for SDK version pinning
cat > ~/.global.json.template << 'EOF'
{
  "sdk": {
    "version": "8.0.100",
    "rollForward": "latestMinor"
  }
}
EOF

# EditorConfig for .NET projects
cat > ~/.editorconfig.template << 'EOF'
# EditorConfig is awesome: https://EditorConfig.org

# top-most EditorConfig file
root = true

# All files
[*]
charset = utf-8
insert_final_newline = true
trim_trailing_whitespace = true
indent_style = space
indent_size = 4

# Code files
[*.{cs,vb,fs,fsx,fsi}]
indent_size = 4

# C# files
[*.cs]
# New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true

# Indentation preferences
csharp_indent_case_contents = true
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true

# Wrapping preferences
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

# Using directives
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

# Project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# YAML files
[*.{yml,yaml}]
indent_size = 2

# XML files
[*.{xml,config,props,targets,nuspec,resx,ruleset,vsixmanifest,vsct}]
indent_size = 2

# Markdown files
[*.md]
trim_trailing_whitespace = false
EOF

# Directory.Build.props template
cat > ~/.Directory.Build.props.template << 'EOF'
<Project>
  <PropertyGroup>
    <LangVersion>latest</LangVersion>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <NoWarn>$(NoWarn);CS1591</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.NetAnalyzers" Version="8.0.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>
</Project>
EOF

# NuGet.config template
cat > ~/.NuGet.config.template << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <packageSources>
    <clear />
    <add key="nuget.org" value="https://api.nuget.org/v3/index.json" protocolVersion="3" />
    <!-- Add additional package sources here -->
  </packageSources>
  <packageSourceMapping>
    <packageSource key="nuget.org">
      <package pattern="*" />
    </packageSource>
  </packageSourceMapping>
</configuration>
EOF

print_success ".NET development environment configured successfully"