#!/bin/bash
# 60-ruby.sh.example - Install Ruby, Rails, and Sinatra development tools
# Rename this file to 60-ruby.sh to enable

# Source common utilities
source /workspace/scripts/lib/common.sh

print_status "Installing Ruby development environment..."

# Install dependencies for Ruby
print_status "Installing Ruby build dependencies..."

ruby_deps=(
    "build-essential"
    "libssl-dev"
    "libreadline-dev"
    "zlib1g-dev"
    "libsqlite3-dev"
    "libxml2-dev"
    "libxslt1-dev"
    "libcurl4-openssl-dev"
    "software-properties-common"
    "libffi-dev"
    "libyaml-dev"
    "libgdbm-dev"
    "libncurses5-dev"
    "automake"
    "libtool"
    "bison"
    "libgmp-dev"
)

sudo apt-get update -qq

for dep in "${ruby_deps[@]}"; do
    print_debug "Installing $dep..."
    if sudo apt-get install -y "$dep" 2>/dev/null; then
        print_debug "✓ $dep installed"
    else
        print_warning "Failed to install $dep or already installed"
    fi
done

# Install rbenv for Ruby version management
if [[ ! -d "$HOME/.rbenv" ]]; then
    print_status "Installing rbenv..."

    # Clone rbenv repository
    if git clone https://github.com/rbenv/rbenv.git ~/.rbenv 2>/dev/null; then
        # Configure PATH for both interactive and non-interactive SSH sessions
        setup_tool_path "rbenv" \
            'export PATH="$HOME/.rbenv/bin:$PATH"' \
            'eval "$(rbenv init - bash)"'

        # Set for current session
        export PATH="$HOME/.rbenv/bin:$PATH"
        eval "$(rbenv init - bash)"

        print_success "rbenv installed successfully"
    else
        print_error "Failed to install rbenv"
        return 1
    fi

    # Install ruby-build plugin
    print_status "Installing ruby-build plugin..."
    if git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build 2>/dev/null; then
        echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bashrc
        export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"
        print_success "ruby-build plugin installed"
    else
        print_error "Failed to install ruby-build plugin"
    fi

    # Install rbenv-vars plugin
    print_status "Installing rbenv-vars plugin..."
    if git clone https://github.com/rbenv/rbenv-vars.git ~/.rbenv/plugins/rbenv-vars 2>/dev/null; then
        print_success "rbenv-vars plugin installed"
    else
        print_warning "Failed to install rbenv-vars plugin"
    fi
else
    print_warning "rbenv is already installed"
    export PATH="$HOME/.rbenv/bin:$PATH"
    eval "$(rbenv init -)"
fi

# Install Ruby versions
print_status "Installing Ruby versions..."

# Check if running in CI mode
if [[ "$CI_MODE" == "true" ]]; then
    print_status "CI mode detected - installing single Ruby version only"
    ruby_versions=(
        "3.4.5"    # Latest stable only in CI
    )
else
    ruby_versions=(
        "3.4.5"    # Latest stable
        "3.3.9"    # Previous stable
    )
fi

for version in "${ruby_versions[@]}"; do
    print_debug "Installing Ruby $version..."
    if rbenv install "$version" 2>/dev/null; then
        print_debug "✓ Ruby $version installed"
    else
        print_warning "Ruby $version already installed or failed to install"
    fi
done

# Set default Ruby version
rbenv global 3.4.5
rbenv rehash

# Verify Ruby is available before proceeding
if ! command_exists ruby; then
    print_warning "Ruby not immediately available after rehash, sourcing environment..."
    export PATH="$HOME/.rbenv/shims:$PATH"
    eval "$(rbenv init - bash)"
fi

if command_exists ruby; then
    print_success "Ruby $(ruby -v) set as default"
else
    print_error "Ruby installation verification failed"
    return 1
fi

# Install Bundler
print_status "Installing Bundler..."
if gem install bundler 2>/dev/null; then
    rbenv rehash
    print_success "Bundler installed: $(bundler -v)"
else
    print_warning "Failed to install Bundler or already installed"
fi

# Check if running in CI mode - skip Rails, gems, and additional setup
if [[ "$CI_MODE" == "true" ]]; then
    print_status "CI mode detected - skipping Rails, Sinatra, and development gems"

    # Create minimal wrapper scripts for non-interactive SSH sessions
    print_status "Creating command wrappers for non-interactive SSH..."
    create_tool_wrapper "ruby" "" "dynamic"
    create_tool_wrapper "gem" "" "dynamic"
    create_tool_wrapper "bundle" "" "dynamic"
    create_tool_wrapper "bundler" "" "dynamic"

    print_success "Ruby development environment configured (CI mode)"
    return 0
fi

# Create wrapper scripts for non-interactive SSH sessions
print_status "Creating command wrappers for non-interactive SSH..."

# Use dynamic wrappers for rbenv-managed commands since they:
# 1. May not exist as shims immediately after rehash
# 2. Can be switched between versions dynamically
# 3. Are available in PATH after sourcing rbenv init

# Create dynamic wrappers (commands resolved via PATH after sourcing environment)
create_tool_wrapper "ruby" "" "dynamic"
create_tool_wrapper "gem" "" "dynamic"
create_tool_wrapper "bundle" "" "dynamic"
create_tool_wrapper "bundler" "" "dynamic"
create_tool_wrapper "rails" "" "dynamic"
create_tool_wrapper "rake" "" "dynamic"
create_tool_wrapper "irb" "" "dynamic"

# Install Rails
print_status "Installing Ruby on Rails..."
if gem install rails 2>/dev/null; then
    rbenv rehash
    print_success "Rails installed: $(rails -v)"
else
    print_warning "Failed to install Rails or already installed"
fi

# Install Sinatra
print_status "Installing Sinatra..."
if gem install sinatra sinatra-contrib 2>/dev/null; then
    rbenv rehash
    print_success "Sinatra installed"
else
    print_warning "Failed to install Sinatra or already installed"
fi

# Install additional Ruby development tools
print_status "Installing Ruby development tools..."

ruby_gems=(
    "pry"                    # Better REPL for Ruby
    "pry-byebug"            # Debugging support for Pry
    "rubocop"               # Ruby style guide linter
    "rubocop-rails"         # Rails-specific cops
    "rubocop-performance"   # Performance-focused cops
    "reek"                  # Code smell detector
    "brakeman"              # Security scanner for Rails
    "bundler-audit"         # Patch-level verification for Bundler
    "solargraph"           # Language server for Ruby
    "rufo"                  # Ruby formatter
    "ruby-debug-ide"        # Debug interface for IDEs
    "debase"               # Ruby debugger
    "rspec"                # Testing framework
    "minitest"             # Testing framework
    "factory_bot"          # Test fixtures replacement
    "faker"                # Generate fake data
    "database_cleaner"     # Database cleaning strategies
    "simplecov"            # Code coverage
    "yard"                 # Documentation generation
    "foreman"              # Process manager
    "whenever"             # Cron job management
    "sidekiq"              # Background job processing
    "puma"                 # Web server
    "unicorn"              # Web server alternative
)

for gem in "${ruby_gems[@]}"; do
    print_debug "Installing $gem..."
    if gem install "$gem" 2>/dev/null; then
        print_debug "✓ $gem installed"
    else
        print_warning "Failed to install $gem"
    fi
done

rbenv rehash

# Install Node.js and Yarn for Rails asset pipeline
if ! command_exists node; then
    print_status "Installing Node.js for Rails asset pipeline..."
    curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash - 2>/dev/null
    sudo apt-get install -y nodejs 2>/dev/null
    print_success "Node.js installed: $(node -v)"
fi

if ! command_exists yarn; then
    print_status "Installing Yarn..."
    npm install -g yarn 2>/dev/null
    print_success "Yarn installed: $(yarn -v)"
fi

# Install PostgreSQL client for Rails database
print_status "Installing PostgreSQL client..."
sudo apt-get install -y postgresql-client libpq-dev 2>/dev/null

# Create useful Ruby/Rails aliases
print_status "Creating Ruby and Rails aliases..."

ruby_aliases='
# Ruby aliases
alias rb="ruby"
alias r="rails"
alias b="bundle"
alias be="bundle exec"
alias bi="bundle install"
alias bu="bundle update"
alias ba="bundle add"
alias blog="bundle outdated"
alias bclean="bundle clean --force"

# Rails aliases
alias rc="rails console"
alias rs="rails server"
alias rg="rails generate"
alias rgm="rails generate migration"
alias rgmo="rails generate model"
alias rgc="rails generate controller"
alias rgs="rails generate scaffold"
alias rd="rails destroy"
alias rdb="rails db:create"
alias rdbm="rails db:migrate"
alias rdbr="rails db:rollback"
alias rdbs="rails db:seed"
alias rdbms="rails db:migrate:status"
alias rdbreset="rails db:drop db:create db:migrate db:seed"
alias rt="rails test"
alias rr="rails routes"
alias rrg="rails routes | grep"

# Rake aliases
alias rk="rake"
alias rkr="rake routes"
alias rkm="rake db:migrate"
alias rks="rake db:seed"
alias rkt="rake test"

# Gem aliases
alias gi="gem install"
alias gu="gem update"
alias gl="gem list"
alias gs="gem search"
alias gclean="gem cleanup"

# Bundler aliases
alias brake="bundle exec rake"
alias brails="bundle exec rails"
alias brspec="bundle exec rspec"
alias bcop="bundle exec rubocop"

# Testing aliases
alias rspec="bundle exec rspec"
alias rspecf="bundle exec rspec --fail-fast"
alias rspeco="bundle exec rspec --only-failures"
alias cop="bundle exec rubocop"
alias copa="bundle exec rubocop -a"
alias copA="bundle exec rubocop -A"

# Development server aliases
alias pumas="bundle exec puma"
alias pumac="bundle exec pumactl"
alias fore="bundle exec foreman start"
alias sidekiq="bundle exec sidekiq"

# rbenv aliases
alias rbv="rbenv versions"
alias rbi="rbenv install"
alias rbu="rbenv uninstall"
alias rbg="rbenv global"
alias rbl="rbenv local"
alias rbr="rbenv rehash"

# Sinatra aliases
alias sinatra="bundle exec ruby app.rb"
alias sinatrar="bundle exec rerun ruby app.rb"
'

echo "$ruby_aliases" >> ~/.bashrc

# Create sample configuration files
print_status "Creating sample configuration files..."

# Rubocop configuration
cat > ~/.rubocop.yml << 'EOF'
AllCops:
  NewCops: enable
  TargetRubyVersion: 3.3
  Exclude:
    - 'bin/**/*'
    - 'db/**/*'
    - 'config/**/*'
    - 'script/**/*'
    - 'vendor/**/*'
    - 'node_modules/**/*'

Style/Documentation:
  Enabled: false

Style/FrozenStringLiteralComment:
  Enabled: false

Metrics/MethodLength:
  Max: 20

Metrics/BlockLength:
  Exclude:
    - 'spec/**/*'
    - 'test/**/*'
EOF

# Gemfile template for new projects
cat > ~/.gemfile_template << 'EOF'
source 'https://rubygems.org'
ruby '3.3.0'

# Core gems
gem 'bundler'
gem 'rake'

# Web frameworks (uncomment as needed)
# gem 'rails', '~> 7.1'
# gem 'sinatra'
# gem 'sinatra-contrib'

# Database adapters (uncomment as needed)
# gem 'pg'
# gem 'sqlite3'
# gem 'mysql2'

# Web servers
# gem 'puma'
# gem 'unicorn'

group :development, :test do
  gem 'pry'
  gem 'pry-byebug'
  gem 'rspec'
  gem 'rubocop', require: false
  gem 'rubocop-rails', require: false
  gem 'rubocop-performance', require: false
end

group :test do
  gem 'factory_bot'
  gem 'faker'
  gem 'database_cleaner'
  gem 'simplecov', require: false
end
EOF

print_success "Ruby development environment configured with Rails and Sinatra support"
