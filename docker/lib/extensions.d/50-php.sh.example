#!/bin/bash
# 50-php.sh.example - Install PHP and Symfony development tools
# Rename this file to 50-php.sh to enable

# Source common utilities
source /workspace/scripts/lib/common.sh

print_status "Installing PHP and Symfony development environment..."

# Update package list
sudo apt-get update -qq

# Install PHP and essential extensions
print_status "Installing PHP 8.3 and extensions..."

php_packages=(
    "php8.3"
    "php8.3-cli"
    "php8.3-common"
    "php8.3-curl"
    "php8.3-mbstring"
    "php8.3-mysql"
    "php8.3-pgsql"
    "php8.3-sqlite3"
    "php8.3-xml"
    "php8.3-zip"
    "php8.3-bcmath"
    "php8.3-gd"
    "php8.3-intl"
    "php8.3-opcache"
    "php8.3-readline"
    "php8.3-soap"
    "php8.3-xdebug"
    "php8.3-redis"
    "php8.3-amqp"
    "php8.3-mongodb"
    "php8.3-imagick"
)

# Add PHP repository
if ! grep -q "ondrej/php" /etc/apt/sources.list.d/*.list 2>/dev/null; then
    print_debug "Adding PHP repository..."
    sudo add-apt-repository -y ppa:ondrej/php 2>/dev/null
    sudo apt-get update -qq
fi

for package in "${php_packages[@]}"; do
    print_debug "Installing $package..."
    if sudo apt-get install -y "$package" 2>/dev/null; then
        print_debug "✓ $package installed"
    else
        print_warning "Failed to install $package or already installed"
    fi
done

# Install Composer
if ! command_exists composer; then
    print_status "Installing Composer..."

    EXPECTED_CHECKSUM="$(php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')"
    php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"

    if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then
        print_error "Composer installer checksum verification failed"
        rm composer-setup.php
    else
        if php composer-setup.php --quiet --install-dir=/usr/local/bin --filename=composer; then
            rm composer-setup.php
            print_success "Composer installed: $(composer --version)"
        else
            print_error "Failed to install Composer"
            rm composer-setup.php
        fi
    fi
else
    print_warning "Composer is already installed: $(composer --version)"
fi

# Install Symfony CLI
if ! command_exists symfony; then
    print_status "Installing Symfony CLI..."

    if wget https://get.symfony.com/cli/installer -O - | bash 2>/dev/null; then
        sudo mv $HOME/.symfony*/bin/symfony /usr/local/bin/symfony
        print_success "Symfony CLI installed: $(symfony version)"
    else
        print_error "Failed to install Symfony CLI"
    fi
else
    print_warning "Symfony CLI is already installed: $(symfony version)"
fi

# Install global PHP development tools via Composer
print_status "Installing PHP development tools..."

# Create global composer directory if it doesn't exist
mkdir -p ~/.composer

php_tools=(
    "friendsofphp/php-cs-fixer"      # PHP Coding Standards Fixer
    "phpstan/phpstan"                 # PHP Static Analysis Tool
    "vimeo/psalm"                     # Static analysis tool
    "phpunit/phpunit"                 # PHP Unit Testing Framework
    "squizlabs/php_codesniffer"       # PHP Code Sniffer
    "phpmd/phpmd"                     # PHP Mess Detector
    "sebastian/phpcpd"               # PHP Copy/Paste Detector
    "psy/psysh"                       # PHP REPL
)

for tool in "${php_tools[@]}"; do
    print_debug "Installing $tool..."
    if composer global require "$tool" 2>/dev/null; then
        print_debug "✓ $tool installed"
    else
        print_warning "Failed to install $tool or already installed"
    fi
done

# Add Composer global bin to PATH
echo '' >> ~/.bashrc
echo '# Composer global bin' >> ~/.bashrc
echo 'export PATH="$HOME/.composer/vendor/bin:$PATH"' >> ~/.bashrc
echo 'export PATH="$HOME/.config/composer/vendor/bin:$PATH"' >> ~/.bashrc

# Configure PHP for development
print_status "Configuring PHP for development..."

# Create PHP development configuration
php_ini_dev="
; Development settings
display_errors = On
display_startup_errors = On
error_reporting = E_ALL
log_errors = On
max_execution_time = 300
memory_limit = 512M
post_max_size = 100M
upload_max_filesize = 100M

; Xdebug settings
xdebug.mode = develop,debug,coverage
xdebug.start_with_request = yes
xdebug.client_host = localhost
xdebug.client_port = 9003
xdebug.idekey = VSCODE

; OPcache settings for development
opcache.enable = 1
opcache.enable_cli = 1
opcache.validate_timestamps = 1
opcache.revalidate_freq = 0
"

# Save development configuration
echo "$php_ini_dev" | sudo tee /etc/php/8.3/mods-available/development.ini > /dev/null
sudo phpenmod development

# Create useful PHP/Symfony aliases
print_status "Creating PHP and Symfony aliases..."

php_aliases='
# PHP aliases
alias php="php -d memory_limit=-1"
alias phpunit="vendor/bin/phpunit"
alias phpstan="vendor/bin/phpstan"
alias psalm="vendor/bin/psalm"
alias phpcbf="vendor/bin/phpcbf"
alias phpcs="vendor/bin/phpcs"
alias php-cs-fixer="vendor/bin/php-cs-fixer"

# Composer aliases
alias c="composer"
alias ci="composer install"
alias cu="composer update"
alias cr="composer require"
alias crd="composer require --dev"
alias cda="composer dump-autoload"
alias co="composer outdated"
alias cg="composer global"

# Symfony aliases
alias sf="php bin/console"
alias sfc="php bin/console cache:clear"
alias sfcc="php bin/console cache:clear && php bin/console cache:warmup"
alias sfmm="php bin/console make:migration"
alias sfdm="php bin/console doctrine:migrations:migrate"
alias sfdd="php bin/console doctrine:database:drop --force"
alias sfdc="php bin/console doctrine:database:create"
alias sfds="php bin/console doctrine:schema:update --force"
alias sfs="symfony server:start"
alias sfsd="symfony server:start -d"
alias sfss="symfony server:stop"
alias sfsl="symfony server:log"

# Laravel aliases (if using Laravel)
alias art="php artisan"
alias arts="php artisan serve"
alias artm="php artisan migrate"
alias artmr="php artisan migrate:rollback"
alias artmf="php artisan migrate:fresh"
alias artms="php artisan migrate:fresh --seed"
alias artdb="php artisan db:seed"
alias arttc="php artisan tinker"
alias artcc="php artisan cache:clear"
alias artoc="php artisan optimize:clear"

# Testing aliases
alias t="phpunit"
alias tf="phpunit --filter"
alias tc="phpunit --coverage-html coverage"
alias stan="phpstan analyse"
alias psalm="psalm --show-info=true"
'

echo "$php_aliases" >> ~/.bashrc

# Create a sample Symfony project configuration
print_status "Creating sample configuration files..."

# PHP CS Fixer configuration
cat > ~/.php-cs-fixer.dist.php << 'EOF'
<?php

$finder = PhpCsFixer\Finder::create()
    ->in(__DIR__)
    ->exclude('var')
    ->exclude('vendor')
    ->exclude('node_modules')
;

$config = new PhpCsFixer\Config();
return $config->setRules([
        '@Symfony' => true,
        '@PSR12' => true,
        'array_syntax' => ['syntax' => 'short'],
        'ordered_imports' => true,
        'no_unused_imports' => true,
        'linebreak_after_opening_tag' => true,
        'phpdoc_order' => true,
        'phpdoc_summary' => false,
    ])
    ->setFinder($finder)
;
EOF

print_success "PHP and Symfony development environment configured successfully"
